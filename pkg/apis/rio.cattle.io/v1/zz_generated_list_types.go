/*
Copyright 2020 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

// +k8s:deepcopy-gen=package
// +groupName=rio.cattle.io
package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ExternalServiceList is a list of ExternalService resources
type ExternalServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []ExternalService `json:"items"`
}

func NewExternalService(namespace, name string, obj ExternalService) *ExternalService {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("ExternalService").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// RouterList is a list of Router resources
type RouterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []Router `json:"items"`
}

func NewRouter(namespace, name string, obj Router) *Router {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("Router").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// StackList is a list of Stack resources
type StackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []Stack `json:"items"`
}

func NewStack(namespace, name string, obj Stack) *Stack {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("Stack").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// DeploymentWranglerList is a list of DeploymentWrangler resources
type DeploymentWranglerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []DeploymentWrangler `json:"items"`
}

func NewDeploymentWrangler(namespace, name string, obj DeploymentWrangler) *DeploymentWrangler {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("DeploymentWrangler").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// StatefulSetWranglerList is a list of StatefulSetWrangler resources
type StatefulSetWranglerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []StatefulSetWrangler `json:"items"`
}

func NewStatefulSetWrangler(namespace, name string, obj StatefulSetWrangler) *StatefulSetWrangler {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("StatefulSetWrangler").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}
