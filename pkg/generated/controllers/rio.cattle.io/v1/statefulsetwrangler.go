/*
Copyright 2020 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/rancher/rio/pkg/apis/rio.cattle.io/v1"
	clientset "github.com/rancher/rio/pkg/generated/clientset/versioned/typed/rio.cattle.io/v1"
	informers "github.com/rancher/rio/pkg/generated/informers/externalversions/rio.cattle.io/v1"
	listers "github.com/rancher/rio/pkg/generated/listers/rio.cattle.io/v1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type StatefulSetWranglerHandler func(string, *v1.StatefulSetWrangler) (*v1.StatefulSetWrangler, error)

type StatefulSetWranglerController interface {
	generic.ControllerMeta
	StatefulSetWranglerClient

	OnChange(ctx context.Context, name string, sync StatefulSetWranglerHandler)
	OnRemove(ctx context.Context, name string, sync StatefulSetWranglerHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() StatefulSetWranglerCache
}

type StatefulSetWranglerClient interface {
	Create(*v1.StatefulSetWrangler) (*v1.StatefulSetWrangler, error)
	Update(*v1.StatefulSetWrangler) (*v1.StatefulSetWrangler, error)
	UpdateStatus(*v1.StatefulSetWrangler) (*v1.StatefulSetWrangler, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.StatefulSetWrangler, error)
	List(namespace string, opts metav1.ListOptions) (*v1.StatefulSetWranglerList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.StatefulSetWrangler, err error)
}

type StatefulSetWranglerCache interface {
	Get(namespace, name string) (*v1.StatefulSetWrangler, error)
	List(namespace string, selector labels.Selector) ([]*v1.StatefulSetWrangler, error)

	AddIndexer(indexName string, indexer StatefulSetWranglerIndexer)
	GetByIndex(indexName, key string) ([]*v1.StatefulSetWrangler, error)
}

type StatefulSetWranglerIndexer func(obj *v1.StatefulSetWrangler) ([]string, error)

type statefulSetWranglerController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.StatefulSetWranglersGetter
	informer          informers.StatefulSetWranglerInformer
	gvk               schema.GroupVersionKind
}

func NewStatefulSetWranglerController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.StatefulSetWranglersGetter, informer informers.StatefulSetWranglerInformer) StatefulSetWranglerController {
	return &statefulSetWranglerController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromStatefulSetWranglerHandlerToHandler(sync StatefulSetWranglerHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.StatefulSetWrangler
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.StatefulSetWrangler))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *statefulSetWranglerController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.StatefulSetWrangler))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateStatefulSetWranglerDeepCopyOnChange(client StatefulSetWranglerClient, obj *v1.StatefulSetWrangler, handler func(obj *v1.StatefulSetWrangler) (*v1.StatefulSetWrangler, error)) (*v1.StatefulSetWrangler, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *statefulSetWranglerController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *statefulSetWranglerController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *statefulSetWranglerController) OnChange(ctx context.Context, name string, sync StatefulSetWranglerHandler) {
	c.AddGenericHandler(ctx, name, FromStatefulSetWranglerHandlerToHandler(sync))
}

func (c *statefulSetWranglerController) OnRemove(ctx context.Context, name string, sync StatefulSetWranglerHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromStatefulSetWranglerHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *statefulSetWranglerController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), namespace, name)
}

func (c *statefulSetWranglerController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), namespace, name, duration)
}

func (c *statefulSetWranglerController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *statefulSetWranglerController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *statefulSetWranglerController) Cache() StatefulSetWranglerCache {
	return &statefulSetWranglerCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *statefulSetWranglerController) Create(obj *v1.StatefulSetWrangler) (*v1.StatefulSetWrangler, error) {
	return c.clientGetter.StatefulSetWranglers(obj.Namespace).Create(obj)
}

func (c *statefulSetWranglerController) Update(obj *v1.StatefulSetWrangler) (*v1.StatefulSetWrangler, error) {
	return c.clientGetter.StatefulSetWranglers(obj.Namespace).Update(obj)
}

func (c *statefulSetWranglerController) UpdateStatus(obj *v1.StatefulSetWrangler) (*v1.StatefulSetWrangler, error) {
	return c.clientGetter.StatefulSetWranglers(obj.Namespace).UpdateStatus(obj)
}

func (c *statefulSetWranglerController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.StatefulSetWranglers(namespace).Delete(name, options)
}

func (c *statefulSetWranglerController) Get(namespace, name string, options metav1.GetOptions) (*v1.StatefulSetWrangler, error) {
	return c.clientGetter.StatefulSetWranglers(namespace).Get(name, options)
}

func (c *statefulSetWranglerController) List(namespace string, opts metav1.ListOptions) (*v1.StatefulSetWranglerList, error) {
	return c.clientGetter.StatefulSetWranglers(namespace).List(opts)
}

func (c *statefulSetWranglerController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.StatefulSetWranglers(namespace).Watch(opts)
}

func (c *statefulSetWranglerController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.StatefulSetWrangler, err error) {
	return c.clientGetter.StatefulSetWranglers(namespace).Patch(name, pt, data, subresources...)
}

type statefulSetWranglerCache struct {
	lister  listers.StatefulSetWranglerLister
	indexer cache.Indexer
}

func (c *statefulSetWranglerCache) Get(namespace, name string) (*v1.StatefulSetWrangler, error) {
	return c.lister.StatefulSetWranglers(namespace).Get(name)
}

func (c *statefulSetWranglerCache) List(namespace string, selector labels.Selector) ([]*v1.StatefulSetWrangler, error) {
	return c.lister.StatefulSetWranglers(namespace).List(selector)
}

func (c *statefulSetWranglerCache) AddIndexer(indexName string, indexer StatefulSetWranglerIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.StatefulSetWrangler))
		},
	}))
}

func (c *statefulSetWranglerCache) GetByIndex(indexName, key string) (result []*v1.StatefulSetWrangler, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.StatefulSetWrangler))
	}
	return result, nil
}

type StatefulSetWranglerStatusHandler func(obj *v1.StatefulSetWrangler, status v1.StatefulSetWranglerStatus) (v1.StatefulSetWranglerStatus, error)

type StatefulSetWranglerGeneratingHandler func(obj *v1.StatefulSetWrangler, status v1.StatefulSetWranglerStatus) ([]runtime.Object, v1.StatefulSetWranglerStatus, error)

func RegisterStatefulSetWranglerStatusHandler(ctx context.Context, controller StatefulSetWranglerController, condition condition.Cond, name string, handler StatefulSetWranglerStatusHandler) {
	statusHandler := &statefulSetWranglerStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromStatefulSetWranglerHandlerToHandler(statusHandler.sync))
}

func RegisterStatefulSetWranglerGeneratingHandler(ctx context.Context, controller StatefulSetWranglerController, apply apply.Apply,
	condition condition.Cond, name string, handler StatefulSetWranglerGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &statefulSetWranglerGeneratingHandler{
		StatefulSetWranglerGeneratingHandler: handler,
		apply:                                apply,
		name:                                 name,
		gvk:                                  controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	RegisterStatefulSetWranglerStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type statefulSetWranglerStatusHandler struct {
	client    StatefulSetWranglerClient
	condition condition.Cond
	handler   StatefulSetWranglerStatusHandler
}

func (a *statefulSetWranglerStatusHandler) sync(key string, obj *v1.StatefulSetWrangler) (*v1.StatefulSetWrangler, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	obj.Status = newStatus
	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(obj, "", nil)
		} else {
			a.condition.SetError(obj, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, obj.Status) {
		var newErr error
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type statefulSetWranglerGeneratingHandler struct {
	StatefulSetWranglerGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *statefulSetWranglerGeneratingHandler) Handle(obj *v1.StatefulSetWrangler, status v1.StatefulSetWranglerStatus) (v1.StatefulSetWranglerStatus, error) {
	objs, newStatus, err := a.StatefulSetWranglerGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	apply := a.apply

	if !a.opts.DynamicLookup {
		apply = apply.WithStrictCaching()
	}

	if !a.opts.AllowCrossNamespace && !a.opts.AllowClusterScoped {
		apply = apply.WithSetOwnerReference(true, false).
			WithDefaultNamespace(obj.GetNamespace()).
			WithListerNamespace(obj.GetNamespace())
	}

	if !a.opts.AllowClusterScoped {
		apply = apply.WithRestrictClusterScoped()
	}

	if a.opts.WithoutOwnerReference {
		apply = apply.WithoutOwnerReference()
	}

	return newStatus, apply.
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
