/*
Copyright 2020 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	v1 "github.com/rancher/rio/pkg/apis/rio.cattle.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StatefulSetWranglerLister helps list StatefulSetWranglers.
type StatefulSetWranglerLister interface {
	// List lists all StatefulSetWranglers in the indexer.
	List(selector labels.Selector) (ret []*v1.StatefulSetWrangler, err error)
	// StatefulSetWranglers returns an object that can list and get StatefulSetWranglers.
	StatefulSetWranglers(namespace string) StatefulSetWranglerNamespaceLister
	StatefulSetWranglerListerExpansion
}

// statefulSetWranglerLister implements the StatefulSetWranglerLister interface.
type statefulSetWranglerLister struct {
	indexer cache.Indexer
}

// NewStatefulSetWranglerLister returns a new StatefulSetWranglerLister.
func NewStatefulSetWranglerLister(indexer cache.Indexer) StatefulSetWranglerLister {
	return &statefulSetWranglerLister{indexer: indexer}
}

// List lists all StatefulSetWranglers in the indexer.
func (s *statefulSetWranglerLister) List(selector labels.Selector) (ret []*v1.StatefulSetWrangler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.StatefulSetWrangler))
	})
	return ret, err
}

// StatefulSetWranglers returns an object that can list and get StatefulSetWranglers.
func (s *statefulSetWranglerLister) StatefulSetWranglers(namespace string) StatefulSetWranglerNamespaceLister {
	return statefulSetWranglerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StatefulSetWranglerNamespaceLister helps list and get StatefulSetWranglers.
type StatefulSetWranglerNamespaceLister interface {
	// List lists all StatefulSetWranglers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.StatefulSetWrangler, err error)
	// Get retrieves the StatefulSetWrangler from the indexer for a given namespace and name.
	Get(name string) (*v1.StatefulSetWrangler, error)
	StatefulSetWranglerNamespaceListerExpansion
}

// statefulSetWranglerNamespaceLister implements the StatefulSetWranglerNamespaceLister
// interface.
type statefulSetWranglerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StatefulSetWranglers in the indexer for a given namespace.
func (s statefulSetWranglerNamespaceLister) List(selector labels.Selector) (ret []*v1.StatefulSetWrangler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.StatefulSetWrangler))
	})
	return ret, err
}

// Get retrieves the StatefulSetWrangler from the indexer for a given namespace and name.
func (s statefulSetWranglerNamespaceLister) Get(name string) (*v1.StatefulSetWrangler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("statefulsetwrangler"), name)
	}
	return obj.(*v1.StatefulSetWrangler), nil
}
